=====================================
DOCUMENTATION: Main Challenge - Backend 
=====================================

Problem statement - 
 - Build a set of REST API's that allows a client to fetch all available freelancers on Dealflow (Customised Data)
 - The API should allow search by first name, last name, email, phone number and/or followers on a social media platform
 - The API should support pagination
 - Store these freelancers in a database

This document provides an overview and documentation of the codebase for the Main Challenge project.

Table of Contents:
1. Introduction
2. Directory Structure
3. Code Overview
4. API Models
5. API Serializers
6. API Views and ViewSets
7. URLs and Routing
8. Data Population Scripts
9. Conclusion

1. Introduction:
-----------------
The Main Challenge codebase is a Django project that implements an API for managing freelancers and brands. It allows creating, retrieving, updating, and deleting freelancers and brands through RESTful endpoints.

2. Directory Structure:
-----------------------
The codebase follows the typical Django project structure. The key directories and files are as follows:
- Main_Challengev2/    # Main project directory
    - api/              # App directory for the API functionality
        - migrations/   # Database migration files
        - models.py     # Defines the database models
        - serializers.py   # Defines serializers for data serialization/deserialization
        - views.py       # Defines views and viewsets for handling requests
    - Main_Challengev2/   # Project settings and configuration directory
        - settings.py    # Django project settings
    - manage.py          # Command-line tool for managing the Django project
    - brand_data.py , data.py   # Directory containing data population scripts

3. Code Overview:
-----------------
The codebase consists of the following components:
- API Models: Defines the database models for the freelancers and brands.
- API Serializers: Defines serializers for data serialization/deserialization.
- API Views and ViewSets: Implements the views and viewsets for handling requests and generating responses.
- URLs and Routing: Defines the URL patterns and routing for the API endpoints.
- Data Population Scripts: Scripts for generating dummy data and populating the database.

4. API Models:
--------------
The code defines two models in the `api/models.py` file:
- Freelancers: Represents the freelancer entity with fields such as `freelancer_id`, `first_name`, `last_name`, `email`, `phone_number`, `brand`, `followers`, `added_data`, and `social_media`.
- Brand: Represents the brand entity with fields such as `brand_id`, `brand_name`, and `about`. It also has a foreign key relationship with Freelancers.

5. API Serializers:
-------------------
The code defines serializers in the `api/serializers.py` file using the Django REST Framework:
- FreelancersSerializer: Serializes and deserializes Freelancers objects, specifying the fields to include.
- BrandSerializer: Serializes and deserializes Brand objects, specifying the fields to include.

6. API Views and ViewSets:
--------------------------
The code defines views and viewsets in the `api/views.py` file:
- FreelancerViewSet: Implements read-only viewset for retrieving Freelancers objects. It includes a custom implementation of the `get_queryset()` method to support filtering based on query parameters.
- BrandViewSet: Implements the viewset for CRUD operations on Brand objects.

7. URLs and Routing:
--------------------
The code defines URL patterns and routing in the `Main_Challengev2/urls.py` file:
- The root URL maps to the Django admin interface.
- The "api/v1/" URL includes the URL patterns for the API endpoints, which are defined in the `api/urls.py` file.
- The blank URL pattern is mapped to the `home_page` view in the `Main_Challengev2/views.py` file.

8. Data Population Scripts:
---------------------------
- `brand_data.py`: Generates dummy data for the Brand model by randomly selecting a Freelancer object and assigning it to the `freelancers` field.
- `data.py`: Generates dummy data for the Freelancers model by randomly selecting a brand from a list and generating fake data for other fields.

9. Conclusion:
--------------
The Main Challenge codebase provides an API for managing freelancers and brands. It includes models, serializers, views, and URL routing to handle CRUD operations on the entities. Data population scripts are provided to generate dummy data for testing and development purposes.


